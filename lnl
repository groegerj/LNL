#!/system/bin/sh

# /system/xbin/lnl -- start a chroot LNL environment
#
# Copyright (C) 2014-2017 Josua Groeger.
#
# LNL stands for "LNL not Linux". It consists of several shell scripts
# to establish a chroot Debian-Linux environment on an Android system.
#
#
# LICENSE
#
# LNL is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# LNL is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with LNL.  If not, see <http://www.gnu.org/licenses/>.

# -------------------------------------------------------------------
# configuration
# -------------------------------------------------------------------

debian_dirs=(bin opt root sbin usr etc lib srv var)
android_dirs=(dev proc sys data system mnt storage)

home_dir=/data/media/home
sdcard_source=/data/media/0
sdcard_targets=(/sdcard /home/sdcard)

debian_root=/debian
android_root=/android
debian_system=/data/debian
debian_image=/system/lnl-debian.tar.bz2

# Android toybox mount does not know recursive binds.
mountcommand="busybox mount"
tarcommand="busybox tar"

# -------------------------------------------------------------------
# lnl-init functions
# -------------------------------------------------------------------

lnl-init_security() {
  iptables_allow_port_local() {
    iptables -C INPUT --src 127.0.0.1 -i lo -p tcp --dport $1 -j ACCEPT ||
    iptables -A INPUT --src 127.0.0.1 -i lo -p tcp --dport $1 -j ACCEPT
  }
  
  iptables_block_port() {
    iptables -C INPUT -p udp --dport $1 -j DROP ||
    iptables -A INPUT -p udp --dport $1 -j DROP
    iptables -C INPUT -p tcp --dport $1 -j DROP ||
    iptables -A INPUT -p tcp --dport $1 -j DROP
  }
  
  # x11
  iptables_block_port 6000
  iptables_block_port 6001
}

lnl-init_loopdev() {
  # Strange, the android system seems not to have loop device files by default
  for i in 0 1 2 3 4 5 6 7
  do
    if [[ ! -e /dev/loop$i ]]; then
      mknod /dev/loop$i b 7 $i
    fi
  done
}

lnl-init_mount() {
  mkdir -m 755 "$debian_root"
  mkdir -m 755 "$debian_root/${android_root#/}"
  
  # clone the whole android root
  for i in /*; do
    if [[ "${i#/}" != "${debian_root#/}" ]]; then
      if [[ -h "$i" || -f "$i" || $(stat -c '%d' "$i") == 1 ]]; then
        # copy files and links and anything on tmpfs (bind-mount fails there)
        cp -al "$i" "$debian_root/${android_root#/}/${i#/}"
      elif [[ -d "$i" ]]; then
        # recursive bind-mount all other non-tmpfs directories
        mkdir "$debian_root/${android_root#/}/${i#/}"
        $mountcommand --rbind "$i" "$debian_root/${android_root#/}/${i#/}"
      else
        echo "lnl: error, don't know how to handle \"$i\"..."
      fi
    fi
  done
  
  mkdir -m 777 "$debian_root/tmp"
  mkdir -m 755 "$debian_root/run"
  
  for i in ${android_dirs[*]}; do
    mkdir "$debian_root/$i"
    if [[ "$i" == "sys" ]]; then
      # bind mount, not recursive here,
      # because /sys/fs/selinux filesystem somehow breaks apt-get, dpkg, X11...
      $mountcommand --bind "/$i" "$debian_root/$i"
    else
      $mountcommand --rbind "/$i" "$debian_root/$i"
    fi
  done
  
  for i in ${debian_dirs[*]}; do
    mkdir "$debian_root/$i"
    $mountcommand --rbind "$debian_system/$i" "$debian_root/$i"
  done
  
  # home directory
  mkdir -m 755 "$debian_root/home"
  
  if [[ ! -d "$home_dir" ]]; then
    mkdir -m 755 "$home_dir"
    chown media_rw:media_rw "$home_dir"
  fi
  $mountcommand --rbind "$home_dir" "$debian_root/home"
  
  for i in ${sdcard_targets[*]}; do
    if [[ ! -d "$debian_root/${i#/}" ]]; then
      mkdir "$debian_root/${i#/}"
    fi
    $mountcommand --rbind "$sdcard_source" "$debian_root/${i#/}"
  done
}

# -------------------------------------------------------------------
# main part
# -------------------------------------------------------------------

if [[ $(id -u) -ne 0 ]]; then
  echo "lnl: must be run as root, exiting."
  exit 1
fi

type busybox >/dev/null 2>&1 || {
  echo "lnl: busybox not installed, exiting."
  exit 1
}

# set SE Linux to permissive, necessary for transparent mounting etc.
setenforce 0
 
$mountcommand -o remount,rw /
$mountcommand -o remount,rw,exec,suid,dev /data

if [[ ! -d "$debian_root" ]]; then
  if [[ ! -d "$debian_system" && -f "$debian_image" ]]; then
    echo ""
    echo "lnl: Debian system directory $debian_system"
    echo "     does not exist."
    echo ""
    echo "     Do you want to create it from $debian_image?"
    echo "     Warning: Extracting the archive may take some time."
    echo "     Afterwards, I will immediately start LNL."
    echo ""
    echo -n "[y/N]: "
    read YN
    if [ "$YN" != "y" ]; then
      echo "Apparently not, exiting."
      exit 0
    fi
    cd /data
    $tarcommand xvjf "$debian_image"
  fi
  
  if [[ ! -d "$debian_system" ]]; then
    echo "lnl: Debian system directory $debian_system"
    echo "     does not exist and cannot be created."
    exit 1
  fi
  
  lnl-init_security
  lnl-init_loopdev
  lnl-init_mount
fi

chroot /debian /sbin/lnl-chroot

